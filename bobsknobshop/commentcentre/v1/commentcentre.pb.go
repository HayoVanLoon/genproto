// Code generated by protoc-gen-go. DO NOT EDIT.
// source: bobsknobshop/commentcentre/v1/commentcentre.proto

package commentcentre

import (
	fmt "fmt"
	v1 "github.com/HayoVanLoon/genproto/bobsknobshop/common/v1"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

func init() {
	proto.RegisterFile("bobsknobshop/commentcentre/v1/commentcentre.proto", fileDescriptor_b1871a1b004822c1)
}

var fileDescriptor_b1871a1b004822c1 = []byte{
	// 197 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x90, 0xb1, 0xcb, 0xc2, 0x30,
	0x10, 0xc5, 0xbf, 0x6f, 0x71, 0x08, 0x74, 0xe9, 0x58, 0x14, 0x45, 0xf7, 0x84, 0xe8, 0xe8, 0x66,
	0x17, 0x41, 0x07, 0x41, 0x70, 0x70, 0x4b, 0x6a, 0x48, 0x8b, 0xed, 0xbd, 0xda, 0xc6, 0x82, 0xff,
	0xbd, 0xd8, 0x56, 0x68, 0x29, 0xd4, 0xf5, 0xdd, 0xef, 0xdd, 0x7b, 0x77, 0x4c, 0x6a, 0xe8, 0xf2,
	0x4e, 0xd0, 0x65, 0x8c, 0x5c, 0x44, 0xc8, 0x32, 0x43, 0x2e, 0x32, 0xe4, 0x0a, 0x23, 0x2a, 0xd9,
	0x17, 0x78, 0x5e, 0xc0, 0xc1, 0x9f, 0x75, 0x2d, 0xbc, 0x4f, 0x54, 0x32, 0x98, 0x5a, 0xc0, 0xa6,
	0x46, 0xa8, 0x3c, 0x11, 0x8a, 0x08, 0x4e, 0xb9, 0x04, 0x54, 0x36, 0xe6, 0x60, 0x35, 0xc8, 0x03,
	0x7d, 0x83, 0x40, 0x0d, 0xb4, 0xbe, 0x31, 0x2f, 0xec, 0xae, 0xf5, 0xcf, 0xcc, 0x0b, 0x0b, 0xa3,
	0x9c, 0x69, 0x65, 0x7f, 0xce, 0x07, 0x25, 0x40, 0xbc, 0x92, 0xbc, 0x05, 0x82, 0x5f, 0xc0, 0xf2,
	0x6f, 0xf7, 0x60, 0x0b, 0x9b, 0xf2, 0xd1, 0x63, 0x4e, 0xff, 0xd7, 0x83, 0x4d, 0x5c, 0xfc, 0xd4,
	0x9f, 0x91, 0xd8, 0xab, 0x17, 0x2e, 0x8a, 0x8e, 0x00, 0x09, 0x6b, 0xa8, 0x2e, 0x2b, 0x46, 0x1f,
	0xb8, 0xed, 0x09, 0x7a, 0x52, 0x5b, 0x36, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf8, 0x90, 0x75,
	0xd4, 0x76, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CommentcentreClient is the client API for Commentcentre service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CommentcentreClient interface {
	// Returns a classification for a comment
	CreateComment(ctx context.Context, in *v1.Comment, opts ...grpc.CallOption) (*v1.Comment, error)
}

type commentcentreClient struct {
	cc *grpc.ClientConn
}

func NewCommentcentreClient(cc *grpc.ClientConn) CommentcentreClient {
	return &commentcentreClient{cc}
}

func (c *commentcentreClient) CreateComment(ctx context.Context, in *v1.Comment, opts ...grpc.CallOption) (*v1.Comment, error) {
	out := new(v1.Comment)
	err := c.cc.Invoke(ctx, "/bobsknobshop.commentcentre.v1.Commentcentre/CreateComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommentcentreServer is the server API for Commentcentre service.
type CommentcentreServer interface {
	// Returns a classification for a comment
	CreateComment(context.Context, *v1.Comment) (*v1.Comment, error)
}

func RegisterCommentcentreServer(s *grpc.Server, srv CommentcentreServer) {
	s.RegisterService(&_Commentcentre_serviceDesc, srv)
}

func _Commentcentre_CreateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Comment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentcentreServer).CreateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bobsknobshop.commentcentre.v1.Commentcentre/CreateComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentcentreServer).CreateComment(ctx, req.(*v1.Comment))
	}
	return interceptor(ctx, in, info, handler)
}

var _Commentcentre_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bobsknobshop.commentcentre.v1.Commentcentre",
	HandlerType: (*CommentcentreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateComment",
			Handler:    _Commentcentre_CreateComment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bobsknobshop/commentcentre/v1/commentcentre.proto",
}
