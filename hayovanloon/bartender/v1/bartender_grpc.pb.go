// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package bartender

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BartenderClient is the client API for Bartender service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BartenderClient interface {
	// Adds a new beer the collection.
	CreateBeer(ctx context.Context, in *CreateBeerRequest, opts ...grpc.CallOption) (*Beer, error)
	// Get a beer.
	GetBeer(ctx context.Context, in *GetBeerRequest, opts ...grpc.CallOption) (*Beer, error)
}

type bartenderClient struct {
	cc grpc.ClientConnInterface
}

func NewBartenderClient(cc grpc.ClientConnInterface) BartenderClient {
	return &bartenderClient{cc}
}

func (c *bartenderClient) CreateBeer(ctx context.Context, in *CreateBeerRequest, opts ...grpc.CallOption) (*Beer, error) {
	out := new(Beer)
	err := c.cc.Invoke(ctx, "/hayovanloon.bartender.v1.Bartender/CreateBeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bartenderClient) GetBeer(ctx context.Context, in *GetBeerRequest, opts ...grpc.CallOption) (*Beer, error) {
	out := new(Beer)
	err := c.cc.Invoke(ctx, "/hayovanloon.bartender.v1.Bartender/GetBeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BartenderServer is the server API for Bartender service.
// All implementations must embed UnimplementedBartenderServer
// for forward compatibility
type BartenderServer interface {
	// Adds a new beer the collection.
	CreateBeer(context.Context, *CreateBeerRequest) (*Beer, error)
	// Get a beer.
	GetBeer(context.Context, *GetBeerRequest) (*Beer, error)
	mustEmbedUnimplementedBartenderServer()
}

// UnimplementedBartenderServer must be embedded to have forward compatible implementations.
type UnimplementedBartenderServer struct {
}

func (*UnimplementedBartenderServer) CreateBeer(context.Context, *CreateBeerRequest) (*Beer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBeer not implemented")
}
func (*UnimplementedBartenderServer) GetBeer(context.Context, *GetBeerRequest) (*Beer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBeer not implemented")
}
func (*UnimplementedBartenderServer) mustEmbedUnimplementedBartenderServer() {}

func RegisterBartenderServer(s *grpc.Server, srv BartenderServer) {
	s.RegisterService(&_Bartender_serviceDesc, srv)
}

func _Bartender_CreateBeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BartenderServer).CreateBeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hayovanloon.bartender.v1.Bartender/CreateBeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BartenderServer).CreateBeer(ctx, req.(*CreateBeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bartender_GetBeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BartenderServer).GetBeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hayovanloon.bartender.v1.Bartender/GetBeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BartenderServer).GetBeer(ctx, req.(*GetBeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Bartender_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hayovanloon.bartender.v1.Bartender",
	HandlerType: (*BartenderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBeer",
			Handler:    _Bartender_CreateBeer_Handler,
		},
		{
			MethodName: "GetBeer",
			Handler:    _Bartender_GetBeer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hayovanloon/bartender/v1/bartender.proto",
}
