// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package greeter

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GreeterClient is the client API for Greeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreeterClient interface {
	// Creates a Greeting for later use.
	CreateGreeting(ctx context.Context, in *CreateGreetingRequest, opts ...grpc.CallOption) (*Greeting, error)
	// Retrieves a Greeting.
	GetGreeting(ctx context.Context, in *GetGreetingRequest, opts ...grpc.CallOption) (*Greeting, error)
	// Lists all Greetings.
	ListGreetings(ctx context.Context, in *ListGreetingsRequest, opts ...grpc.CallOption) (*ListGreetingsResponse, error)
	// Lists all Hugs.
	ListHugs(ctx context.Context, in *ListHugsRequest, opts ...grpc.CallOption) (*ListHugsResponse, error)
}

type greeterClient struct {
	cc grpc.ClientConnInterface
}

func NewGreeterClient(cc grpc.ClientConnInterface) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) CreateGreeting(ctx context.Context, in *CreateGreetingRequest, opts ...grpc.CallOption) (*Greeting, error) {
	out := new(Greeting)
	err := c.cc.Invoke(ctx, "/hayovanloon.greeter.Greeter/CreateGreeting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) GetGreeting(ctx context.Context, in *GetGreetingRequest, opts ...grpc.CallOption) (*Greeting, error) {
	out := new(Greeting)
	err := c.cc.Invoke(ctx, "/hayovanloon.greeter.Greeter/GetGreeting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) ListGreetings(ctx context.Context, in *ListGreetingsRequest, opts ...grpc.CallOption) (*ListGreetingsResponse, error) {
	out := new(ListGreetingsResponse)
	err := c.cc.Invoke(ctx, "/hayovanloon.greeter.Greeter/ListGreetings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) ListHugs(ctx context.Context, in *ListHugsRequest, opts ...grpc.CallOption) (*ListHugsResponse, error) {
	out := new(ListHugsResponse)
	err := c.cc.Invoke(ctx, "/hayovanloon.greeter.Greeter/ListHugs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GreeterServer is the server API for Greeter service.
// All implementations must embed UnimplementedGreeterServer
// for forward compatibility
type GreeterServer interface {
	// Creates a Greeting for later use.
	CreateGreeting(context.Context, *CreateGreetingRequest) (*Greeting, error)
	// Retrieves a Greeting.
	GetGreeting(context.Context, *GetGreetingRequest) (*Greeting, error)
	// Lists all Greetings.
	ListGreetings(context.Context, *ListGreetingsRequest) (*ListGreetingsResponse, error)
	// Lists all Hugs.
	ListHugs(context.Context, *ListHugsRequest) (*ListHugsResponse, error)
	mustEmbedUnimplementedGreeterServer()
}

// UnimplementedGreeterServer must be embedded to have forward compatible implementations.
type UnimplementedGreeterServer struct {
}

func (*UnimplementedGreeterServer) CreateGreeting(context.Context, *CreateGreetingRequest) (*Greeting, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGreeting not implemented")
}
func (*UnimplementedGreeterServer) GetGreeting(context.Context, *GetGreetingRequest) (*Greeting, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGreeting not implemented")
}
func (*UnimplementedGreeterServer) ListGreetings(context.Context, *ListGreetingsRequest) (*ListGreetingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGreetings not implemented")
}
func (*UnimplementedGreeterServer) ListHugs(context.Context, *ListHugsRequest) (*ListHugsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHugs not implemented")
}
func (*UnimplementedGreeterServer) mustEmbedUnimplementedGreeterServer() {}

func RegisterGreeterServer(s *grpc.Server, srv GreeterServer) {
	s.RegisterService(&_Greeter_serviceDesc, srv)
}

func _Greeter_CreateGreeting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGreetingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).CreateGreeting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hayovanloon.greeter.Greeter/CreateGreeting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).CreateGreeting(ctx, req.(*CreateGreetingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_GetGreeting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGreetingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).GetGreeting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hayovanloon.greeter.Greeter/GetGreeting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).GetGreeting(ctx, req.(*GetGreetingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_ListGreetings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGreetingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).ListGreetings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hayovanloon.greeter.Greeter/ListGreetings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).ListGreetings(ctx, req.(*ListGreetingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_ListHugs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHugsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).ListHugs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hayovanloon.greeter.Greeter/ListHugs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).ListHugs(ctx, req.(*ListHugsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Greeter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hayovanloon.greeter.Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGreeting",
			Handler:    _Greeter_CreateGreeting_Handler,
		},
		{
			MethodName: "GetGreeting",
			Handler:    _Greeter_GetGreeting_Handler,
		},
		{
			MethodName: "ListGreetings",
			Handler:    _Greeter_ListGreetings_Handler,
		},
		{
			MethodName: "ListHugs",
			Handler:    _Greeter_ListHugs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hayovanloon/greeter/greeter.proto",
}
